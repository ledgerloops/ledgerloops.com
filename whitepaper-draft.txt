OpenTabs: Second-order promise loops

Introduction to promise loops
=============================
If everybody would only look after their own needs, the world would be a lot less efficient. It's often
useful if one person performs a task that benefits a different person. For instance, you can cook for me,
or I can fix your bicycle. A society in which everybody cooperates altruistically is hard to keep together,
because if some people only consume and don't contribute, they can easily destablize such a cooperating
society. To avoid that, apart from exchanging neutral information about what activities are needed and who
plans to do what, we can exchange promises.

A promise is a statement that has a more complex social function than simply the exchange of information.
For instance, if you say to you "You will cook for me", that sounds very different from you yourself saying
"I will cook for you". The first may be acceptable as a command from a boss to a worker, or from a parent to
a child. The second is not a command, because you yourself make a statement about what you will do. This
statement can turn out to be true or false, but since we both automatically interpret it as a promise,
your reputation will be damaged if you don't attempt to make the statement true, that is, I will trust you
to keep your promise, or at least to try to do so.

When interpreting your promise, I can take into account several factors:

* your ethics (that is, you are not a mean person who tries to achieve personal gain by making empty promises),
* your intelligence and mental sanity (that is, you are not demented, delusional, or quick to forget what you
promised),
* the difficulty of the task you promise to perform (whether you promise to do the impossible),
* related to that, your skill and ability to successfully complete the task (that is, you know how to cook,
have access to the necessary ingredients and tools, etc.),
* your reputation risk (that is, even if your ethics are questionable, or unknown to me, I can trust that you
will keep your promise based on social connections we share, and who would like you less if they found out you
made an empty promise to me),
* your punishment risk (you could be arrested and punished by some government authority or mafia boss if they
notice you making empty promises to people they protect),
* your retaliation risk (I could personally have more or less opportunity to punish you myself),

and probably maybe some other factors. In order to mitigate some of these risks, you and I can make
promises that are not absolute, but only applicable if some conditions are true. For instance, you could promise
"I will cook for you, if you fix my bicycle". If I then also promise "I will fix your bicycle if you will cook for me",
then we have the opportunity to barter. Once we both made our conditional promise, we can trigger both of them into
action by agreeing to both go ahead and perform the task we mentioned. Ideally, to minimize the risk even more for both
of us, we could do our tasks at the same time, so that I can see you are at least starting to cook, and you can see I'm
starting to work on your bicycle. If after a short time one of us would stop investing effort in our task, then the other
person would notice, ask what the reason is, and renegotiate the barter. If we both invest into our cooperation bit-by-bit,
instead of making a big investment upfront, our exposure to the risk of the other person not keeping their promise is also
smaller.

If barter is not possible (for instance, if your bicycle is not currently broken), we can use debt to still achieve a deal
that is fair (you cook for me today because you know it will make me remember my debt when the time comes that you ask me
to fix your bicycle). If debt-based cooperation is not possible, (for instance, we're only meeting briefly and will likely return
to being strangers soon), we can use money. If you are a restaurant owner, and your bicycle is not currently broken, I might
promise to pay you in commodity money (like gold), or fiat money (like bank notes). We can also use virtual money, which is
neither commodity that has intrinsic value, nor fiat backed by a government, but instead is backed by a community of people
who happen to use this money as currency (like bitcoin or bank-of-time).

Another option, if your bicycle is not broken, but you do need a haircut, and we can find a hairdresser with a broken bicycle,
would be group barter: we agree that you cook for me, I fix the hairdresser's bicycle, the hairdresser
cuts your hair, and all three of us gain something that is of more value to us than the effort we invest in the task we
perform for the next person in the loop. In a graph:


    your promise      > my promise                   > hairdresser's promise
          |          /      |                       /          |
          v         /       v                      /           v
    you cook for me     I fix hairdresser's bicycle     you get a haircut

In this graph, your promise creates a debt, my promise is conditional on you keeping your promise, and forwards the debt
to the hairdresser. The hairdresser then cuts your hair to eliminate the debt.

But in practice, we will probably go through three phases of discussion before we reach this group barter deal. First,
we search for people to barter with (let's call this the search phase). Once you, me, and the hairdresser found each
other, we each make our conditional promise (let's call this the negotiation phase):
* You promise to cook for me if you get a haircut from the hairdresser
* I promise to fix the hairdresser's bicycle if you cook for me
* The hairdresser promises to cut your hair if I fix their bicycle

The three conditional promises form a three-step loop in the way they refer to each other. Let's call this a
"first-order promise loop" for reasons that will become clear later.

At this point, we can all see that there is an opportunity for cooperation, and we might negotiate exchange rates to make
the deal as fair as possible for everybody involved, adjusting maybe the amount of food you promise to cook, stating more
precisely which defects of the bicycle I promise fix, and which type of haircut you will get. Once we all agree that the
deal is fair, we can move on to the execution phase.

Ideally, we all start at the same time, so that no person needs to take more risk than the others, but this may not always be
practical (especially the combination of cooking food and getting a haircut at the same time!). This means one person (let's
call this person the "starter") needs to convert their conditional promise into an absolute promise, thereby forcing the
next promise to become absolute as well. As a logical rule of inference on the contents of my promise:
   
* I promised to:  [fix the hairdresser's bicycle] if you cook for me
* And given that:                                    You cook for me
* Conclusion:     --------------------------------------------------- +
* I should now:   [fix the hairdresser's bicycle]

But now we can notice a problem with using first-order promise loops for organizing cooperation: you may have only just
met this hairdresser, and once you cook, you now have a double risk of not obtaining your haircut: either I fail to
keep my promise, or the hairdresser fails to keep theirs. For very long first-order promise loops, the likelyhood that,
somewhere along the line, someone fails to deliver on their promise, becomes very high. Second-order
promise loops address this problem.

Second-order promise loops
==========================

After understanding the above introduction to first-order promise loops, the idea behind second-order promise loops is
in itself surprisingly simple. The search phase is the same - you and me and the hairdresser somehow need to discover
each other, and each other's needs. But the negotiation phase is different.
Remember that in the negotiation phase for the first-order promise loop, we made the following promises:

* You promise to [[cook for me] if [you get a haircut from the hairdresser]]
* I promise to [[fix the hairdresser's bicycle] if [you cook for me]]
* The hairdresser promises to [[cut your hair] if [I fix their bicycle]]

In a second-order promise loop, we don't make our promises conditional on the other participants
*keeping* their promise, but on the other participants merely *making* their promise:

* You promise to [[cook for me] if [the hairdresser promises to [cut your hair]]]
* I promise to [[fix the hairdresser's bicycle] if [you promise to [cook for me]]]
* The hairdresser promises to [[cut your hair] if [I promise to [fix their bicycle]]]

After this negotiation phase, where we all establish and communicate our conditional promises, we can move on to the commitment
phase, where one person (the "committer") converts their conditional promise to an absolute one. Before moving on to the
execution phase, where you would actually start to cook, you first announce your decision to us that you will do so. That means
we now have one absolute promise (from you) and two conditional ones (from me and from the hairdresser):

* You promise to [cook for me]
* I promise to [[fix the hairdresser's bicycle] if [you promise to [cook for me]]]
* The hairdresser promises to [[cut your hair] if [I promise to [fix their bicycle]]]

Now, regardless of whether you actually keep your promise, we can already apply inference to the other two promises:

* I promised to:                      [fix the hairdresser's bicycle] if [you promise to [cook for me]]
* And given that:                                                        You promised to [cook for me]
* Conclusion:                         ----------------------------------------------------------------- +
* I should now:                       [fix the hairdresser's bicycle]
* Also, the hairdresser promised to:  [cut your hair] if [I promise to [fix their bicycle]]
* And because:                                            I should now [fix their bicycle]
* Conclusion:                         ---------------------------------------------------- +
* The hairdresser should now:         [cut your hair]

The term "second-order" refers to the fact that promises are conditional on promises, so instead of one layer of promises on top
of statements about reality, we now have promises on top of promises (let us know if you can think of a better name for this!).

The advantage of second-order promise loops over first-order promise loops is, in terms of this example, that you can now claim
your haircut, even if the hairdresser's bicycle remains broken.

OpenTabs is a system that formalizes the messages which can be exchanged to implement the search, negotiation,
commitment, and execution phase. Assuming each party has a number of contacts, and with each contact has a secure communcation
channel (including a way to check the other party's signature on cryptographically signed messages), you might imagine roughly
what the messages in each phase would look like.

I haven't fully worked out the details of these message types yet, but will try to write up a first version soon. Let me know
if you're interested in collaborating on this!

Cheers,
Michiel de Jong.

. My conditional promise, in combination with the fact that you cook for me, 

Given a list of promisers, identified by their public keys P_0..P_(N-1), and a list of tasks, uniquely
identified by hashes T_0..T_(N-1) of their descriptions, a promise loop is a list of conditional statements
C_0..C_(N-1) such that each C_i has the following form:
C_i = "P_i promises to perform task T_i on the condition that person P_((i-1)%N) promises to perform task T_((i-1)%N)"

The loop of conditional statements is an undirected graph with arcs from C_((i-1)%N) to C_i, and we call
C_((i-1)%N) the "predecessor" of C_i. So if for example N=3:

i (i-1) N ((i-1)%N) C_i predecessor(C_i)
========================================
0  -1   3   2       C_0  C_2
1   0   3   0       C_1  C_0
2   1   3   1       C_2  C_1

In a graph:


       C_0

     ^     \
    /       v

 C_2   <--   C_1

The same predecessor concept is defined for P_i and T_i.

A loop of conditional promises is not useful by itself, because none of the promises is binding by itself; they
are all conditional on their predecessor. One of the promisers in the loop should take the initiative to start
a chain reaction to make all promises binding. This can be done by spontaneously performing the task that was mentioned
in the promise, but then the promiser must trust all other promisers in the chain before their own condition
A starter statement S_i differs from the corresponding conditional statement C_i in that the condition
has been removed, so:
S_i = "P_i promises to perform task T_i"
An inferred statement I_i consists of a conditional statement C_i, plus either a starter statement S_((i-1)%N)
for its predecessor in the loop, or a starter statement S_i for i itself:
I_i = S_i | "C_i AND I_((i-1)%N)"


T_i 
The TRIGGER operation on a statement S_i is defined as removing that statement's condition, meaning that
it will become:

Machine-readable approach:
var tasks = {
  <hash>: {
    type: MONEY_TRANSFER,
    currency: BITCOIN,
    recipient: <wallet>,
    before: <date>
  }
};

var events: {
  eventHash: {
    provider: <pubkey>,
    task: <hash>,
  },
};

var conditionalPromises = {
  <payloadHash>: {
    payload: {
      ifClause: <eventHash>,
      thenClause: <eventHash>,
    },
    conditionalPromiseHash: <payloadHash>,
    signer: <pubkey>,
    signature: <sig>
  },
  // ...
};

"If ifClause.provider promises to perform ifClause.task then I (signer) promise (or vouch) that thenClause.provider will perform thenClause.task."

Chain backward:
* For an inference rule, find the `ifClause` fields
* If an inference rule is found with a matching `thenClause` (same <eventHash> as the other rule's `ifClause`), and correct `signature` field, you can chain the two together

Chain forward:
* For an inference rule, decide if you're interested in the `thenClause` event happening.
* If so, take its `thenClause` as the `ifClause` of a new conditionalPromise. Add your own `thenClause` offer, calculate the new `payloadHash`, add yourself as the `signer`, sign the `payloadHash`, and add that as the `signature`.



If you find a cycle of which you are the signer of at least one of the conditionalPromises, make that promise unconditional:

var unconditionalPromises = {
  <payloadHash>: {
    payload: {
      ifClause: null,
      thenClause: <eventHash>,
    },
    conditionalPromiseHash: <payloadHash>,
    promiseHash: <payloadHash>,
    signer: <pubkey>,
    signature: <sig>
  },
  // ...
};

This will fulfill the ifClause of the next promise in the chain, and therefore the next, etc., until the ifClause of your own promise is also inferred. Note that ifClause is not "Once that is done", it's "Once that is promised", and so you can immediately force your provider to fulfill your if-clause by showing them the cycle.

Cyclic Contracts

A contract  between three parties will usually contain ten important parts:
* an identifier for party A
* something party A should do
* a signature by party A
* same three things for B
* same three things for C
* a statement that all parties are happy to keep their promise, and in return for it not demand anything more than each other party keeping their ends of the deal. That's to say, an agreement that all parties involved consider the trade a fair deal.

Party A hopes that parties B and C will keep their promise, and "in return", party A will keep their own promise. Party A's signature on the document serves to convince parties B and C that party A will probably keep their promise. Of course, this hope is based on the psychology and willingness to cooperate of party A,but at least the contract gives an exact definition of whether A has played by the social rules or not. This then allows other parties to either punish party A for breach of contract, or allow parties B and C to do so.

In a cyclic three-party contract, each party only trusts one of the other two parties to uphold their promise.

In this case, party A makes a promise to party B, but is not interested in the promise party B makes. However, party C is interested in party B's promise, and is willing to make a promise that interests party A.

Party A does not have to make a global statement that they think the contract is a fair deal, just that they are happy to keep their promise to B if C keep their promise to them. The contract is only binding if all parties signed it, creating a cycle of parties promising to keep their promise if the previous party does, and even if the previous party breaks the contract, that will be handled locally and does not give the losing party the right to break the contract themselves.

Simple example with two parties and time limit:
DOCUMENT A1: (Monday)
Hi Bob,
Would you be interested in an apple? I would give it to you if I receive something else that (according to my sole judgement) is of more value to me. Maybe there's something you can offer me in return?
CHeers,
Alice.

DOCUMENT B1: (Tuesday)
Hi Alice,
Yes, would you be interested in an orange? I hereby bindingly promise to give it to you on the condition that you bindingly and unconditionally promise me to give me that apple.
I have reserved the orange for you until the end of the week, in the hope we can reach an agreement in time.
Signed,
Bob.

DOCUMENT A2: (Wednesday)
Hi again Bob,
Sure, I love oranges! I successfully checked your signature on document B1. So I hereby bindingly promise you to give you that apple. I'll send it now. Let me know if it doesn't arrive!
Signed,
Alice.

DOCUMENT B2: (Thursday)
Hi again Alice,
Thanks for your promise in document A2. I hereby confirm that your signature on document A2 is correct, and it reached me yesterday, so in combination with my document B1, I am now bound to sending you the orange. I'm sending it now, let me know if the orange doesn't reach you. Looking forward to receiving your apple! :)
Signed,
Bob.


Note that both parties can still pretend that they did send the piece of fruit but it was lost in the mail, or that the fruit they hoped to receive never arrived. Bob can even fail to send document B2 and claim he never received document A2 from Alice (or received it too late), and therefore the reservation on the orange expired. So Alice and Bob still need to trust each other enough risk being lied to by the other party. Also, if either the communication channel or the delivery mechanism is unreliable, there is a chance that Bob really does receive document A2 too late (he would have to keep the orange reserved until communication with Alice is reestablished), and there is a chance that delivery fails even though the other party did everything in their power to uphold their part of the deal.

Since there are only two parties in this example, there is no need to use pseudonyms.


Longer example of a cyclic contract, with three participants (time limit and pseudonyms removed from this example for simplicity):

DOCUMENT A1: description of Alice's offer to Bob (not binding).
Hi Bob,
Would you be interested in an apple? I would give it to you if I receive something else that is of more value to me. Maybe there's something you can offer me in return, or otherwise I would also be interested in seeing what Charlie has to offer, do you know him?
Signed,
Alice.

DOCUMENT B1: description of Bob's offer to Charlie (conditionally binding).
Hi Charlie,
Would you be interested in an orange? I would give it to you if I receive something else that is of more value to me. Maybe there's something you can offer me in return, or otherwise I would also be interested in the item Alice described to me in document A1. Do you know her?
Signed,
Bob.

DOCUMENT C1: description of Charlie's offer to Alice (conditionally binding).
Hi Alice,
Would you be interested in a banana? I would give it to you if I receive something else that is of more value to me.
Maybe there's something you can offer me in return, or otherwise I would also be interested in the item Bob described in document B1. It seems you know him, because he promised me to execute on B1 on the condition that you execute on A1. Did you send him an offer by that identifier?
Signed,
Charlie.

DOCUMENT A2:
Hi again Bob,
I heard you talked to Charlie! Great. I'll give you the apple if you can prove to me that Charlie will execute on C1.
Signed,
Alice.

DOCUMENT B2:
Hi again Charlie,
I heard you sent Alice a conditionally binding offer identified as C1; I have no idea what's in there, but Alice told me she's interested
in it, so I'll give you the orange if you bindingly promise to execute on C1.
Signed,
Bob.

DOCUMENT C2:
Hi Alice (CC: Bob),
This is document C2. I hereby bindingly and unconditionally promise to execute on C1.
I'm not doing this as a charity to you, or because I want something back from you in return, but just because I'm interested in the item which Bob (CC'ed) described in B1, and in combination with B2, this now binds Bob to execute on B1. I checked Bob's signature on both documents, so I trust that they were signed by him. I've known Bob for a while now, and I trust him on his word! :)
Signed,
Charlie.

DOCUMENT B3:
Hi Charlie (CC: Alice),
Thanks for your document C2, in which you bindingly promise to execute on C1.
I have no idea what you offered Alice there, but you're right in saying that your document C2, in combination with my B2, binds me to execute on my document B1. I agree that I'm now bound to this, and it makes me happy because that, in turn, in combination with document A2, binds Alice (CC'd) to execute on A1! I checked the signatures on documents A1 and A2, and they seem to come from Alice, whom I trust. :)
Signed,
Bob.

DOCUMENT A3:
Hi Bob (CC: Charlie),
Thanks to both of you, this is a great deal which we all benefit from.
Bob, I checked Charlie's signatures on C1 and C2, and indeed, in combination with A2, this binds me to giving you the item described in A1.
Charlie, I'm looking forward to receiving your item described in C1 and C2. I checked your signatures, and trust you to give me the item soon.
Signed,
Alice.

It took 8 messages, but now everybody knows they will receive the item they're interested in, and everybody knows they're now contractually bound to sending the item they offered. Since no pseudonyms were used, this example allows Bob to test whether Charlie knows Alice, and Charlie has to leak this information to Bob in order for this flow to work.

This is the happy path, it could also be that Charlie's offer of a banana is too low for Alice, or that Alice doesn't know Charlie, or doesn't trust him to execute on his promise.

The case with 4 or more participants (say Alice, Bob, Charlie and David) is similar - then, Alice knows what she has offered to Bob, and what David offered to her, but she has no idea what Bob offered to Charlie, nor what Charlie offered to David, nor even who this Charlie person is anyway (!). She only needs to know that Charlie is some person who offers something to David in return to something he receives from Bob, and that both Bob and Charlie agree on an unforgeable identifier for Charlie, so that they can both check his signature (at no point does Alice have to check a signature from Charlie, only his direct neighbors Bob and David do).

Using pseudonyms and slightly changing the flow to obscure the length of the cycle, even less information needs to be leaked. Here is an example which has many participants, but only the communication on between two neighbors in the cycle is visible. Neither of them know how many participants there really are.
In practice you wouldn't want to give out put options without an expiry date, since it requires you to reserve your assets indefinitely while waiting for the network to find a cycle.
But for simplicity, we left the expiry date out in this example. Note that Alice and Bob don't hide their identity from each other because they need to trust each other, and not some anonymous third party, to deliver on their promises.


DOCUMENT A1:
Hi Bob,
Would you be interested in an apple? I would give it to you if I receive something else that (according to my sole judgement) is of more value to me. Maybe there's something you, or someone else, can offer me in return?
For the purpose of this offer, you can refer to me as pseudonym Mr. X, with the following public key: [...]. You can refer to the apple in question as "Object 1".
Cheers,
Alice.

DOCUMENT B1:
Hi Charlie,
Would you be interested in an orange? I will give it to you if you can prove that someone will give Mr. X (public key: ...) something he calls "Object 1".
You can refer to me as Mr. Y (public key: ...), and to the orange as "Object 2".
Signed,
Bob.

DOCUMENT C1:
Hi Alice,
If you know Mr. X, you can give him "Object 1", and if you do, I promise to give you a banana.
You can refer to me as Mr. Z1 (public key: ...) and to the banana as "Object 3".
Signed,
Charlie.

DOCUMENT C2:
Hi Bob,
That orange sounds great, I will try to get someone to satisfy Mr. X's needs.
You can refer to me as Mr. Z2 (public key: ...).
Signed,
Charlie.

DOCUMENT B2:
Hi Alice,
Thanks for sending me your offer and your temporary identity of Mr. X.
I also wanted to give you this pseudonymous promise from a certain Mr. Y [*) Bob himself, of course, but he's not reveiling this to Alice as this could leak his friendship with Charlie to her], in case it helps you to get your requirements satisfied:
> Dear Mr. Z1,
> If Mr. X receives "Object 1", then I will give you "Object 2".
> Signed,
> Mr. Y.
Signed,
Bob.

DOCUMENT A2:
Hi Charlie,
Yes, I do know Mr. X indirectly [*) this is a lie, since she herself is of course Mr. X.], and apparently a certain Mr. Y does too, who knows a certain Mr. Z1; forwarding his message:
> Dear Mr. Z1,
> If Mr. X receives "Object 1", then I will give you "Object 2".
> Signed,
> Mr. Y.
I hereby also promise you to make sure Mr. X receives "Object 1" if you promise to send me that banana.
Signed,
Alice.

DOCUMENT C3:
Hi Alice,
I hereby promise to send you the banana, so now you have to give Mr. X "Object 1", which obliges Mr. Y to give "Object 2" to Mr. Z1, and then I'll also discovered there are ways to force Mr. Z1 to transfer something to Mr. Z2 (which, as you know, is me).
Signed,
Charlie.


Protocol:
Provided you have a number of contacts, and which each of them you have a way to check their signatures, and you have a secure private communication channel for sending documents.

If you have something to offer, offer it to one of your contacts. Apart from the message text, include a message identifier (these strings would be long hashes instead of short strings like 'A1'), and a one-time identity (again, a long hash and not your real-life name 'Alice') which the contact can use to refer to you and to the documents you sent.
Now send that same one-time identity to your other contacts, so they know you're now also known as that identifier.

If you receive an offer, proceed as per the example above to try to help make it into a binding cyclic contract.

In the example above, the last documents are sent out with CC's, but that reveals to party A that party B and party C know each other and do business together. When using one-time identities, there's no need to reveal that. Of course, party A will known that party B and C know each other at least indirectly, but when talking to Bob, Charlie can pretend that he's not satisfying Alice's requirements himself, but that there's a David or even an Edward etc. in between them. Let's look at a more sophisticated example:

...
